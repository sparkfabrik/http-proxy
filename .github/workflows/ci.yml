name: CI/CD Pipeline

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build services image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-services:test
          cache-from: type=gha,scope=services
          cache-to: type=gha,mode=max,scope=services

      - name: Build Traefik image for testing
        uses: docker/build-push-action@v5
        with:
          context: ./build/traefik
          file: ./build/traefik/Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-traefik:test
          cache-from: type=gha,scope=traefik
          cache-to: type=gha,mode=max,scope=traefik

      - name: Build Prometheus image for testing
        uses: docker/build-push-action@v5
        with:
          context: ./build/prometheus
          file: ./build/prometheus/Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-prometheus:test
          cache-from: type=gha,scope=prometheus
          cache-to: type=gha,mode=max,scope=prometheus

      - name: Build Grafana image for testing
        uses: docker/build-push-action@v5
        with:
          context: ./build/grafana
          file: ./build/grafana/Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-grafana:test
          cache-from: type=gha,scope=grafana
          cache-to: type=gha,mode=max,scope=grafana

      - name: Install test dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y dnsutils curl

      - name: Run integration tests
        run: |
          chmod +x test/test.sh
          make test

      - name: Validate compose configuration
        run: |
          docker compose config
          docker compose build --dry-run || echo "Dry run not supported, skipping"

      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ github.run_id }}
          path: |
            test-logs/
          retention-days: 7

  security-scan:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  dev-deploy:
    runs-on: ubuntu-latest
    # Deploy dev images from any branch that's not main (for testing)
    if: github.ref != 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
      security-events: write # For security scanning
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: traefik
            context: ./build/traefik
            dockerfile: ./build/traefik/Dockerfile
            image_name: ${{ github.repository }}-traefik
            cache_scope: traefik
          - name: services
            context: .
            dockerfile: ./build/Dockerfile
            image_name: ${{ github.repository }}-services
            cache_scope: services
          - name: prometheus
            context: ./build/prometheus
            dockerfile: ./build/prometheus/Dockerfile
            image_name: ${{ github.repository }}-prometheus
            cache_scope: prometheus
          - name: grafana
            context: ./build/grafana
            dockerfile: ./build/grafana/Dockerfile
            image_name: ${{ github.repository }}-grafana
            cache_scope: grafana
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract branch name
        id: branch
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Generate dev tags
        id: dev-tags
        run: |
          BRANCH_NAME="${{ steps.branch.outputs.branch }}"
          # Sanitize branch name for Docker tag (replace special chars with hyphens)
          SAFE_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          SHORT_SHA="${{ github.sha }}"
          SHORT_SHA="${SHORT_SHA:0:7}"

          echo "dev_tag=${SAFE_BRANCH}" >> $GITHUB_OUTPUT
          echo "dev_sha_tag=${SAFE_BRANCH}-${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Build and push dev image (${{ matrix.name }})
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ steps.dev-tags.outputs.dev_tag }}
            ${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ steps.dev-tags.outputs.dev_sha_tag }}
          labels: |
            org.opencontainers.image.title=${{ matrix.name }} HTTP Proxy (Dev)
            org.opencontainers.image.description=Spark HTTP Proxy - ${{ matrix.name }} component (Development build from ${{ steps.branch.outputs.branch }})
            org.opencontainers.image.vendor=SparkFabrik
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.ref.name=${{ steps.branch.outputs.branch }}
          cache-from: type=gha,scope=${{ matrix.cache_scope }}
          cache-to: type=gha,mode=max,scope=${{ matrix.cache_scope }}

      - name: Run Trivy vulnerability scanner on dev image
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ matrix.image_name }}:${{ steps.dev-tags.outputs.dev_tag }}
          format: "sarif"
          output: "trivy-dev-results-${{ matrix.name }}.sarif"
          severity: "CRITICAL,HIGH"
          ignore-unfixed: true

      - name: Upload Trivy dev scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-dev-results-${{ matrix.name }}.sarif"

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      security-events: write
    strategy:
      fail-fast: false # Continue building other images if one fails
      matrix:
        include:
          - name: traefik
            context: ./build/traefik
            dockerfile: ./build/traefik/Dockerfile
            image_name: ${{ github.repository }}-traefik
            cache_scope: traefik
          - name: services
            context: .
            dockerfile: ./build/Dockerfile
            image_name: ${{ github.repository }}-services
            cache_scope: services
          - name: prometheus
            context: ./build/prometheus
            dockerfile: ./build/prometheus/Dockerfile
            image_name: ${{ github.repository }}-prometheus
            cache_scope: prometheus
          - name: grafana
            context: ./build/grafana
            dockerfile: ./build/grafana/Dockerfile
            image_name: ${{ github.repository }}-grafana
            cache_scope: grafana
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image_name }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ matrix.name }} HTTP Proxy
            org.opencontainers.image.description=Spark HTTP Proxy - ${{ matrix.name }} component
            org.opencontainers.image.vendor=SparkFabrik

      - name: Build and push Docker image (${{ matrix.name }})
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.cache_scope }}
          cache-to: type=gha,mode=max,scope=${{ matrix.cache_scope }}
          # Security and optimization
          provenance: true
          sbom: true

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ matrix.image_name }}:latest
          format: "sarif"
          output: "trivy-image-results-${{ matrix.name }}.sarif"
          severity: "CRITICAL,HIGH"
          ignore-unfixed: true

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-image-results-${{ matrix.name }}.sarif"
