name: CI/CD Pipeline

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build services image for testing
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-services:test
          cache-from: type=gha,scope=services
          cache-to: type=gha,mode=max,scope=services

      - name: Build Traefik image for testing
        uses: docker/build-push-action@v5
        with:
          context: ./build/traefik
          file: ./build/traefik/Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:test
          cache-from: type=gha,scope=traefik
          cache-to: type=gha,mode=max,scope=traefik

      - name: Install test dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y dnsutils curl

      - name: Run integration tests
        run: |
          chmod +x test/test.sh
          make test

      - name: Validate compose configuration
        run: |
          docker compose config
          docker compose build --dry-run || echo "Dry run not supported, skipping"

      - name: Upload test logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ github.run_id }}
          path: |
            test-logs/
          retention-days: 7

  security-scan:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      security-events: write  # For security scanning
    strategy:
      fail-fast: false  # Continue building other images if one fails
      matrix:
        include:
          - name: traefik
            context: ./build/traefik
            dockerfile: ./build/traefik/Dockerfile
            image_name: ${{ github.repository }}
            cache_scope: traefik
          - name: services  
            context: .
            dockerfile: ./build/Dockerfile
            image_name: ${{ github.repository }}-services
            cache_scope: services
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ matrix.image_name }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=${{ matrix.name }} HTTP Proxy
            org.opencontainers.image.description=Spark HTTP Proxy - ${{ matrix.name }} component
            org.opencontainers.image.vendor=SparkFabrik

      - name: Build and push Docker image (${{ matrix.name }})
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.cache_scope }}
          cache-to: type=gha,mode=max,scope=${{ matrix.cache_scope }}
          # Security and optimization
          provenance: true
          sbom: true

      - name: Run security scan
        uses: docker/scout-action@v1
        if: github.event_name != 'pull_request'
        with:
          command: cves
          image: ${{ env.REGISTRY }}/${{ matrix.image_name }}:latest
          only-severities: critical,high
          exit-code: true
