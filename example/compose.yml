# HTTP Proxy Stack - Production Ready Configuration
# This demonstrates how to use the published images from GitHub Container Registry
#
# Usage:
#   Basic HTTP Proxy:
#     docker compose up -d
#
#   With Monitoring (Prometheus + Grafana):
#     docker compose --profile metrics up -d
#
# Access:
#   - Traefik Dashboard: http://localhost:30000
#   - DNS Server: UDP port 19322
#   - HTTP Proxy: Port 80
#   - HTTPS Proxy: Port 443 (manual configuration required)
#   - Grafana (optional): http://localhost:30001 (admin/admin)
#   - Prometheus (optional): http://localhost:9090

services:
  # Watches Docker events and generates Traefik configuration for VIRTUAL_HOST
  dinghy_layer:
    image: ghcr.io/sparkfabrik/http-proxy-services:feature-98_migrate_to_traefik
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_dynamic:/traefik/dynamic
    command: ["sh", "-c", "/usr/local/bin/dinghy-layer"]
    labels:
      - "traefik.enable=false"
    restart: unless-stopped

  # Automatically joins containers to the http-proxy network
  join_networks:
    image: ghcr.io/sparkfabrik/http-proxy-services:feature-98_migrate_to_traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      ["sh", "-c", "/usr/local/bin/join-networks -container-name http-proxy"]
    labels:
      - "traefik.enable=false"
    restart: unless-stopped

  dns:
    image: ghcr.io/sparkfabrik/http-proxy-services:feature-98_migrate_to_traefik
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DNS_FORWARD_ENABLED=${DNS_FORWARD_ENABLED:-false}
      - DNS_UPSTREAM_SERVERS=${DNS_UPSTREAM_SERVERS:-8.8.8.8:53,1.1.1.1:53}
      - HTTP_PROXY_DNS_TLDS=${HTTP_PROXY_DNS_TLDS:-loc}  # Comma-separated list of TLDs or specific domains to handle
      - HTTP_PROXY_DNS_TARGET_IP=${HTTP_PROXY_DNS_TARGET_IP:-127.0.0.1}  # IP address to resolve domains to
      - HTTP_PROXY_DNS_PORT=${HTTP_PROXY_DNS_PORT:-19322}  # Port for DNS server to listen on
    ports:
      - "19322:19322/udp"
    command: ["sh", "-c", "/usr/local/bin/dns-server"]
    labels:
      - "traefik.enable=false"
    restart: unless-stopped

  # Main HTTP reverse proxy
  traefik:
    image: ghcr.io/sparkfabrik/http-proxy-traefik:feature-98_migrate_to_traefik
    container_name: http-proxy
    ports:
      - "80:80"
      - "443:443"
      - "30000:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - traefik_dynamic:/traefik/dynamic
      - "${HOME}/.local/spark/http-proxy/certs:/traefik/certs:ro" # Auto-load user certificates
    labels:
      - "traefik.enable=false"
    restart: unless-stopped

  prometheus:
    image: ghcr.io/sparkfabrik/http-proxy-prometheus:feature-98_migrate_to_traefik
    container_name: http-proxy-prometheus
    ports:
      - "9090"
    volumes:
      - prometheus_data:/prometheus
    labels:
      - "traefik.enable=false"
    restart: unless-stopped
    profiles:
      - metrics

  grafana:
    image: ghcr.io/sparkfabrik/http-proxy-grafana:feature-98_migrate_to_traefik
    container_name: http-proxy-grafana
    ports:
      - "30001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/traefik-official.json
    volumes:
      - grafana_data:/var/lib/grafana
    labels:
      - "traefik.enable=false"
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - metrics

volumes:
  traefik_dynamic:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: http-proxy_default
