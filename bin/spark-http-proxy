#!/usr/bin/env bash

set -e

# Get the real path of the script (resolves symlinks)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"

# Paths
CONFIG_DIR="${HOME}/.local/spark/http-proxy"
CERT_DIR="${CONFIG_DIR}/certs"

# Function to discover compose file in priority order
discover_compose_file() {
  local candidates=(
    "${CONFIG_DIR}/compose.yml"                        # 1. User override (highest priority)
    "${SCRIPT_DIR}/compose.yml"                        # 2. Default (shipped with repo)
  )

  for candidate in "${candidates[@]}"; do
    if [[ -f "${candidate}" ]]; then
      echo "${candidate}"
      return 0
    fi
  done

  # Fallback if nothing found (shouldn't happen with ${SCRIPT_DIR}/compose.yml)
  echo "${SCRIPT_DIR}/compose.yml"
}

# Configuration
export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-http-proxy}
export COMPOSE_FILE=${COMPOSE_FILE:-$(discover_compose_file)}

# Logging functions
log_info() { echo "ℹ  $1"; }
log_success() { echo "✅ $1"; }
log_error() { echo "❌ $1"; }
log_warning() { echo "⚠️  $1"; }

# Helper function to get a service's mapped port
get_service_port() {
  local service_name="$1"
  local internal_port="$2"
  docker compose -f "${COMPOSE_FILE}" port "${service_name}" "${internal_port}" 2>/dev/null | cut -d':' -f2
}

# Display DNS environment variables if any are set
show_dns_env_vars() {
  [[ -z "${HTTP_PROXY_DNS_TLDS:-}${HTTP_PROXY_DNS_TARGET_IP:-}${HTTP_PROXY_DNS_PORT:-}" ]] && return

  echo -e "\nDNS Proxy Configuration:"
  [[ -n "${HTTP_PROXY_DNS_TLDS:-}" ]] && echo "  HTTP_PROXY_DNS_TLDS: ${HTTP_PROXY_DNS_TLDS}"
  [[ -n "${HTTP_PROXY_DNS_TARGET_IP:-}" ]] && echo "  HTTP_PROXY_DNS_TARGET_IP: ${HTTP_PROXY_DNS_TARGET_IP}"
  [[ -n "${HTTP_PROXY_DNS_PORT:-}" ]] && echo "  HTTP_PROXY_DNS_PORT: ${HTTP_PROXY_DNS_PORT}"
  echo
}

# Process TLD list and execute callback for each valid TLD
process_tlds() {
  local dns_tlds="${HTTP_PROXY_DNS_TLDS:-loc}"
  local callback="$1"

  IFS=',' read -ra TLDS <<< "${dns_tlds}"
  for tld in "${TLDS[@]}"; do
    tld="${tld// /}"  # Remove spaces
    tld="${tld#.}"    # Remove leading dot
    [[ -n "${tld}" ]] && "${callback}" "${tld}"
  done
}

# Warn about unmanaged macOS resolver files that might conflict
_warn_on_unmanaged_macos_dns_files() {
  [[ ! -d "/etc/resolver" ]] && return 0

  local current_tlds=()
  _get_current_tlds() { current_tlds+=("$1"); }
  process_tlds "_get_current_tlds"

  local unmanaged_files=()
  for resolver_file in /etc/resolver/*; do
    [[ -f "${resolver_file}" ]] || continue
    local filename
    filename=$(basename "${resolver_file}")

    # Skip if managed by current config
    local is_managed=false
    for tld in "${current_tlds[@]}"; do
      [[ "${filename}" == "${tld}" ]] && is_managed=true && break
    done
    [[ "${is_managed}" == "true" ]] && continue

    # Warn if it looks like our config but is unmanaged
    if grep -q "nameserver 127.0.0.1" "${resolver_file}" 2>/dev/null; then
      unmanaged_files+=(".${filename}")
    fi
  done

  if [[ ${#unmanaged_files[@]} -gt 0 ]]; then
    log_warning "Found unmanaged DNS resolver files: ${unmanaged_files[*]}"
    log_info "These may conflict with current configuration. Remove manually if no longer needed."
  fi
}

# Configure macOS DNS resolver for specific domains
configure_macos_dns() {
  [[ "${OSTYPE}" != "darwin"* ]] && return 0

  local dns_port="${HTTP_PROXY_DNS_PORT:-19322}"
  local updated_any=false
  local configured_domains=()

  _warn_on_unmanaged_macos_dns_files

  # Configure each TLD
  configure_tld() {
    local tld="$1"
    local resolver_file="/etc/resolver/${tld}"
    local display_name
    [[ "${tld}" == *"."* ]] && display_name="${tld}" || display_name=".${tld}"
    local expected_content="nameserver 127.0.0.1\nport ${dns_port}\n"

    # Skip if already configured correctly
    [[ -f "${resolver_file}" ]] && [[ "$(cat "${resolver_file}")" == "$(printf '%b' "${expected_content}")" ]] && return

    # Create/update resolver file
    sudo mkdir -p /etc/resolver
    printf '%b' "${expected_content}" | sudo tee "${resolver_file}" >/dev/null
    configured_domains+=("${display_name}")
    updated_any=true
  }

  process_tlds "configure_tld"

  # Show results and flush DNS if needed
  if [[ "${updated_any}" == "true" ]]; then
    log_success "DNS resolver configured for ${configured_domains[*]}"
    sudo dscacheutil -flushcache
    sudo killall -HUP mDNSResponder >/dev/null 2>&1 || true
  fi
}

# Configure Linux systemd-resolved for specific domains
configure_linux_dns() {
  [[ "${OSTYPE}" == "darwin"* ]] && return 0
  ! command -v systemctl >/dev/null 2>&1 && return 0

  local dns_port="${HTTP_PROXY_DNS_PORT:-19322}"
  local resolved_config="/etc/systemd/resolved.conf.d/http-proxy.conf"
  local domains=""

  # Build domains list
  build_domain() { domains="${domains}~$1 "; }
  process_tlds "build_domain"
  domains="${domains% }"  # Remove trailing space
  [[ -z "${domains}" ]] && return 0

  local expected_content="[Resolve]\nDNS=127.0.0.1:${dns_port}\nDomains=${domains}\n"

  # Skip if already configured correctly
  [[ -f "${resolved_config}" ]] && [[ "$(cat "${resolved_config}")" == "$(printf '%b' "${expected_content}")" ]] && return 0

  # Create/update configuration
  sudo mkdir -p /etc/systemd/resolved.conf.d
  printf '%b' "${expected_content}" | sudo tee "${resolved_config}" >/dev/null

  # Restart systemd-resolved
  if sudo systemctl restart systemd-resolved; then
    log_success "systemd-resolved configured and restarted"
  else
    log_success "systemd-resolved configuration ready"
    log_warning "Failed to restart systemd-resolved"
  fi
}

# Configure system DNS for the proxy domains
configure_system_dns() {
  if [[ "${OSTYPE}" == "darwin"* ]]; then
    configure_macos_dns
  else
    configure_linux_dns
  fi
}

# Generate bash/zsh completion script
generate_completion() {
  local script_name
  script_name=$(basename "${0}")

  cat <<EOF
# Bash/Zsh completion for ${script_name}
_${script_name//-/_}_completion() {
    local cur prev commands services
    COMPREPLY=()
    cur="\${COMP_WORDS[COMP_CWORD]}"
    prev="\${COMP_WORDS[COMP_CWORD-1]}"

    # Available commands
    commands="help start status restart start-with-metrics stop-metrics clean destroy logs dashboard grafana prometheus configure-dns completion install-completion generate-mkcert up down pull build ps top exec show-config"

    # Available services for logs command
    services="traefik dinghy_layer join_networks dns prometheus grafana"

    case "\${prev}" in
        logs)
            COMPREPLY=( \$(compgen -W "\${services}" -- \${cur}) )
            return 0
            ;;
        generate-mkcert)
            # No completion for domain names
            return 0
            ;;
        *)
            ;;
    esac

    # Complete commands
    COMPREPLY=( \$(compgen -W "\${commands}" -- \${cur}) )
    return 0
}

# Register completion function
if [[ -n \${ZSH_VERSION-} ]]; then
    # Zsh completion
    autoload -U compinit && compinit
    autoload -U bashcompinit && bashcompinit
fi

complete -F _${script_name//-/_}_completion ${script_name}
EOF
}

# Install completion script to shell profile
install_completion() {
  local script_path
  script_path=$(realpath "${0}")
  local shell_profile

  # Determine shell profile file
  if [[ -n "${ZSH_VERSION-}" ]] || [[ "${SHELL}" == *zsh* ]]; then
    shell_profile="$HOME/.zshrc"
  elif [[ -n "${BASH_VERSION-}" ]] || [[ "${SHELL}" == *bash* ]]; then
    shell_profile="${HOME}/.bashrc"
  else
    log_error "Unsupported shell. Please manually add: source <(${script_path} completion)"
    return 1
  fi

  local completion_line="source <(${script_path} completion)"

  # Check if already installed
  if grep -q "${completion_line}" "${shell_profile}" 2>/dev/null; then
    log_warning "Completion already installed in ${shell_profile}"
    return 0
  fi

  # Add completion to shell profile
  {
    echo ""
    echo "# Auto-completion for $(basename "${0}")"
    echo "${completion_line}"
  } >>"${shell_profile}"

  log_success "Completion installed to ${shell_profile}"
  log_info "Restart your terminal or run: source ${shell_profile}"
}

# Show which configuration file is being used
show_config() {
  echo "Current configuration:"
  echo "  Script location: ${SCRIPT_DIR}/$(basename "${0}")"
  echo "  Compose file: ${COMPOSE_FILE}"
  echo "  Config directory: ${CONFIG_DIR}"
  echo "  Certificate directory: ${CERT_DIR}"
  echo ""
  echo "Configuration priority order:"
  echo "  1. User override: ${CONFIG_DIR}/compose.yml"
  echo "  2. Default (shipped): ${SCRIPT_DIR}/compose.yml"
  echo ""
  if [[ "${COMPOSE_FILE}" == "${CONFIG_DIR}/compose.yml" ]]; then
    echo "✅ Using user override configuration"
  elif [[ "${COMPOSE_FILE}" == "${SCRIPT_DIR}/compose.yml" ]]; then
    echo "✅ Using default configuration (shipped with script)"
  else
    echo "ℹ️  Using custom configuration: ${COMPOSE_FILE}"
  fi
}

# Prerequisite checks
check_prerequisites() {
  local errors=0

  command -v docker >/dev/null 2>&1 || { log_error "Docker not installed or not in PATH"; ((errors++)); }
  docker info >/dev/null 2>&1 || { log_error "Docker daemon not running"; ((errors++)); }
  [[ -z "${COMPOSE_FILE}" ]] && { log_error "Docker Compose file not defined"; ((errors++)); }
  [[ -n "${COMPOSE_FILE}" && ! -f "${COMPOSE_FILE}" ]] && { log_error "Docker Compose file not found at ${COMPOSE_FILE}"; ((errors++)); }

  return ${errors}
}

# Open URL in browser
open_url() {
  local url="$1"
  local description="$2"

  log_info "Opening ${description}: ${url}"

  if command -v open >/dev/null 2>&1; then
    open "${url}"
  elif command -v xdg-open >/dev/null 2>&1; then
    xdg-open "${url}"
  else
    echo "Cannot open browser automatically. Please visit: ${url}"
    [[ "$3" ]] && echo "$3"
    return 1
  fi
}

# Ensure prerequisites are met
if ! check_prerequisites; then
  exit 1
fi

# Ensure config directories exist
mkdir -p "${CONFIG_DIR}" "${CERT_DIR}"

show_usage() {
  echo "Usage: ${0} <command> [options]"
  echo ""
  echo "Lifecycle Commands:"
  echo "  start                Start HTTP proxy (basic stack)"
  echo "  start-with-metrics   Start HTTP proxy with monitoring stack"
  echo "  status               Show HTTP proxy status"
  echo "  restart              Restart HTTP proxy"
  echo "  stop-metrics         Stop only monitoring services"
  echo "  clean                Stop all services and remove volumes"
  echo "  destroy              Completely remove all containers, volumes, networks and images"
  echo ""
  echo "Dashboards & Utilities:"
  echo "  dashboard            Open Traefik dashboard"
  echo "  grafana              Open Grafana dashboard"
  echo "  prometheus           Open Prometheus"
  echo "  logs [service]       Show logs (optionally for specific service)"
  echo ""
  echo "Configuration & Setup:"
  echo "  show-config          Show current configuration and file locations"
  echo "  generate-mkcert      Generate SSL certificates for a domain (supports wildcards)"
  echo "  configure-dns        Configure system DNS to automatically resolve proxy domains"
  echo "                       (macOS: /etc/resolver, Linux: systemd-resolved)"
  echo "  completion           Generate shell completion script"
  echo "  install-completion   Install completion to shell profile"
  echo "  help                 Show this help message"
  echo ""
  echo "Docker Compose Passthrough:"
  echo "  up, down, build...   Standard Docker Compose commands are also passed through."
  echo ""
  echo "Examples:"
  echo "  ${0} help                     # Show this help"
  echo "  ${0} show-config              # Show configuration file locations"
  echo "  ${0} install-completion       # Install autocomplete"
  echo "  ${0} start                    # Basic HTTP proxy only"
  echo "  ${0} start-with-metrics       # HTTP proxy + monitoring"
  echo "  ${0} stop-metrics             # Remove monitoring, keep proxy"
  echo "  ${0} clean                    # Stop everything"
  echo "  ${0} logs traefik             # Show Traefik logs"
  echo "  ${0} configure-dns            # Configure DNS only"
  echo "  ${0} up --profile metrics     # Alternative metrics start"
  echo ""
  echo "Config: ${COMPOSE_FILE}"
  echo ""
  echo "DNS Proxy Environment Variables:"
  echo "  HTTP_PROXY_DNS_TLDS          Top-level domains to proxy (.loc by default)"
  echo "  HTTP_PROXY_DNS_TARGET_IP     Target IP for DNS resolution (127.0.0.1 by default)"
  echo "  HTTP_PROXY_DNS_PORT          DNS proxy listening port (19322 by default)"
  echo ""
  echo "Docker Image Configuration:"
  echo "  HTTP_PROXY_DOCKER_IMAGE_TAG  Docker image tag to use (latest by default)"
  echo ""
  echo "DNS Configuration:"
  echo "  The 'configure-dns' command automatically sets up your system to resolve"
  echo "  proxy domains (like *.loc) to localhost, eliminating manual /etc/hosts editing."
  echo ""
  echo "  On macOS:    Creates /etc/resolver files for each domain"
  echo "  On Linux:    Configures systemd-resolved with domain-specific DNS settings"
  echo ""
  echo "Example with DNS configuration:"
  echo "  HTTP_PROXY_DNS_TLDS=local,dev ${0} start"
  echo "  HTTP_PROXY_DNS_TARGET_IP=192.168.1.50 ${0} start"
  echo ""
  echo "Example with specific Docker image tag:"
  echo "  HTTP_PROXY_DOCKER_IMAGE_TAG=v1.2.3 ${0} start"
  echo ""
  echo "Example certificate generation:"
  echo "  ${0} generate-mkcert example.loc"
  echo "  ${0} generate-mkcert '*.spark.loc'"
  echo ""
  echo "Autocomplete:"
  echo "  Quick setup: ${0} install-completion"
  echo "  Manual setup: source <(${0} completion)"
}

install_mkcert() {
  if command -v mkcert >/dev/null 2>&1; then
    return 0
  fi

  if ! command -v brew >/dev/null 2>&1; then
    log_error "mkcert not found and Homebrew not available for installation"
    return 1
  fi

  log_info "Installing mkcert with Homebrew..."
  if brew install mkcert nss && mkcert -install; then
    log_success "mkcert installed successfully"
    return 0
  else
    log_error "Failed to install mkcert"
    return 1
  fi
}

generate_mkcert() {
  local domain="$1"

  if [ -z "${domain}" ]; then
    read -rp "Enter domain name: " domain
  fi

  if [ -z "${domain}" ]; then
    log_error "Domain name required"
    exit 1
  fi

  if ! install_mkcert; then
    exit 1
  fi

  # Create a safe filename for wildcard domains
  local safe_filename="${domain}"
  # Replace * with _wildcard_ for filename safety
  safe_filename="${safe_filename//\*/_wildcard_}"
  # Replace other problematic characters
  safe_filename="${safe_filename//\//_}"

  log_info "Generating certificates for: ${domain}"
  log_info "Certificate files will be named: ${safe_filename}.pem and ${safe_filename}-key.pem"

  mkcert -cert-file "${CERT_DIR}/${safe_filename}.pem" \
    -key-file "${CERT_DIR}/${safe_filename}-key.pem" \
    "${domain}"

  log_success "Certificates generated successfully:"
  log_info "  Certificate: ${CERT_DIR}/${safe_filename}.pem"
  log_info "  Private key: ${CERT_DIR}/${safe_filename}-key.pem"

  # Restart traefik to apply new certificates.
  log_info "Restarting Traefik to apply new certificates..."
  docker compose -f "${COMPOSE_FILE}" restart traefik

  echo ""
  log_info "💡 For wildcard certificates in Traefik, you may need to configure"
  log_info "   dynamic configuration to use these certificates explicitly."
}

open_dashboard() {
  local port
  port=$(get_service_port traefik 8080)
  if [[ -z "${port}" ]]; then
    log_error "Traefik dashboard port not found. Is the proxy running?"
    exit 1
  fi
  open_url "http://localhost:${port}" "Traefik dashboard"
}

open_grafana() {
  local port
  port=$(get_service_port grafana 3000)
  if [[ -z "${port}" ]]; then
    log_error "Grafana port not found. Is it running?"
    log_info "Try starting with: ${0} start-with-metrics"
    exit 1
  fi
  open_url "http://localhost:${port}" "Grafana dashboard" "Login: admin/admin"
}

open_prometheus() {
  local port
  port=$(get_service_port prometheus 9090)
  if [[ -z "${port}" ]]; then
    log_error "Prometheus port not found. Is it running?"
    log_info "Try starting with: ${0} start-with-metrics"
    exit 1
  fi
  open_url "http://localhost:${port}" "Prometheus"
}

# Docker Compose helpers
dc_cmd() { docker compose -f "${COMPOSE_FILE}" "$@"; }
dc_metrics() { docker compose -f "${COMPOSE_FILE}" --profile metrics "$@"; }

# Check if service is running
is_running() { dc_cmd ps | grep -q "$1"; }

# Ensure proxy is running before proceeding
ensure_running() {
  if ! is_running http-proxy; then
    log_warning "HTTP Proxy is not running"
    echo "   🚀 Start with: ${0} start"
    exit 1
  fi
}

# Clean up and start services
recreate_stack() {
  local with_metrics="$1"

  docker rm -vf http-proxy >/dev/null 2>&1 || true
  docker rm -vf "$(docker ps -q --filter "label=com.docker.compose.project=${COMPOSE_PROJECT_NAME}")" >/dev/null 2>&1 || true

  if [[ "${with_metrics}" == "true" ]]; then
    dc_metrics down -v
    dc_metrics up -d --pull always
  else
    dc_metrics down -v
    dc_cmd up -d --pull always
  fi
}

case "$1" in
"" | "-h" | "--help" | "help")
  show_usage
  exit 0
  ;;
show-config)
  show_config
  exit 0
  ;;
status)
  log_info "HTTP Proxy Status"
  echo "=================================="

  if is_running http-proxy; then
    log_success "HTTP Proxy is running"
    dashboard_port=$(get_service_port traefik 8080)
    echo "   🌐 Traefik Dashboard: http://localhost:${dashboard_port:-'not available'}"
    echo ""
    dc_cmd ps
    echo ""

    if is_running prometheus; then
      log_success "Monitoring services are running"
      grafana_port=$(get_service_port grafana 3000)
      prometheus_port=$(get_service_port prometheus 9090)
      echo "   📊 Grafana: http://localhost:${grafana_port:-'not available'} (admin/admin)"
      echo "   📈 Prometheus: http://localhost:${prometheus_port:-'not available'}"
    else
      log_warning "Monitoring services are not running"
      echo "   💡 Start with: ${0} start-with-metrics"
    fi
  else
    log_warning "HTTP Proxy is not running"
    echo "   🚀 Start with: ${0} start"
  fi
  ;;
start)
  log_info "Starting HTTP Proxy (basic stack)..."
  recreate_stack "false"
  echo ""
  log_success "HTTP Proxy running"
  dashboard_port=$(get_service_port traefik 8080)
  echo " 🌐 Traefik Dashboard: http://localhost:${dashboard_port:-'not available'}"
  echo " 🕸️  DNS resolving domains: *.${HTTP_PROXY_DNS_TLDS:-loc} → ${HTTP_PROXY_DNS_TARGET_IP:-127.0.0.1}"
  echo " 💡 To add monitoring: ${0} start-with-metrics"
  show_dns_env_vars
  configure_system_dns
  ;;
restart)
  ensure_running
  log_info "Restarting HTTP Proxy..."
  if is_running prometheus; then
    log_info "Restarting with monitoring services..."
    dc_metrics restart
  else
    dc_cmd restart
  fi
  log_success "HTTP Proxy restarted"
  ;;
start-with-metrics)
  log_info "Starting HTTP Proxy with monitoring..."
  recreate_stack "true"
  echo ""
  log_success "HTTP Proxy + Monitoring running"
  dashboard_port=$(get_service_port traefik 8080)
  grafana_port=$(get_service_port grafana 3000)
  prometheus_port=$(get_service_port prometheus 9090)
  echo "   🌐 Traefik Dashboard: http://localhost:${dashboard_port:-'not available'}"
  echo "   🔍 DNS resolving domains: *.${HTTP_PROXY_DNS_TLDS:-loc} → ${HTTP_PROXY_DNS_TARGET_IP:-127.0.0.1}"
  echo "   📊 Grafana Dashboard: http://localhost:${grafana_port:-'not available'} (admin/admin)"
  echo "   📈 Prometheus: http://localhost:${prometheus_port:-'not available'}"
  show_dns_env_vars
  configure_system_dns
  ;;
stop-metrics)
  log_info "Stopping monitoring services..."
  dc_cmd stop prometheus grafana
  dc_cmd rm -f prometheus grafana
  log_success "Monitoring stopped (HTTP Proxy still running)"
  ;;
clean)
  log_info "Stopping all services and cleaning volumes..."
  dc_metrics down -v
  log_success "All services stopped and volumes removed"
  ;;
destroy)
  log_warning "This will completely remove all containers, volumes, networks, and images"
  read -p "Are you sure? (y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "Destroying all HTTP proxy resources..."
    dc_metrics down --volumes --rmi all --remove-orphans
    log_success "All HTTP proxy resources destroyed"
  else
    log_info "Destroy cancelled"
  fi
  ;;
logs)
  if [[ -n "${2:-}" ]]; then
    log_info "Showing logs for service: ${2}"
    dc_cmd logs -f "${2}"
  else
    log_info "Showing logs for all services"
    dc_cmd logs -f
  fi
  ;;
configure-dns)
  echo "🔧 DNS Configuration for HTTP Proxy"
  echo "===================================="
  echo ""
  echo "This command configures your system to automatically resolve proxy domains"
  echo "to localhost, eliminating the need to manually edit /etc/hosts."
  echo ""

  if [[ "${OSTYPE}" == "darwin"* ]]; then
    echo "On macOS, this will:"
    echo "  • Create /etc/resolver files for each configured domain"
    echo "  • Configure domains to use the proxy's DNS server (port ${HTTP_PROXY_DNS_PORT:-19322})"
    echo "  • Flush the DNS cache"
  else
    echo "On Linux, this will:"
    echo "  • Configure systemd-resolved with domain-specific DNS settings"
    echo "  • Point configured domains to the proxy's DNS server (port ${HTTP_PROXY_DNS_PORT:-19322})"
    echo "  • Restart systemd-resolved service"
  fi

  echo ""
  log_info "Configuring system DNS for proxy domains..."
  show_dns_env_vars
  configure_system_dns

  echo ""
  echo "ℹ️  After DNS configuration, domains like 'myapp.loc' will automatically"
  echo "   resolve to localhost without manual /etc/hosts entries."
  ;;
dashboard) open_dashboard ;;
grafana) open_grafana ;;
prometheus) open_prometheus ;;
completion) generate_completion ;;
install-completion) install_completion ;;
generate-mkcert) generate_mkcert "${2}" ;;
*) dc_cmd "$@" ;;
esac
